)lisp (load "~/quicklisp/setup")
)lisp (ql:quickload "gsll")
)lisp (load "gsl.lisp")
)abbrev package GSL Gsl
++ GNU Scientific Library for Axiom (and FriCAS and OpenAxiom)
++ Date Created: October 25, 2015
++ License: BSD  (GSL is distributed under the GPL)
++ Date Last Updated: October 26, 2015
++ Basic Operations: integration
++ Related Domains: DoubleFloat
++ Also See:
++ AMS Classifications:
++ Keywords: GNU; GSL; numeric; integration
++ Examples: gslIntegrationQng(f,0.0::DF,1.0::DF).result
++ References:
++   https://common-lisp.net/project/gsll/
++   http://www.gnu.org/software/gsl/
++   http://www.gnu.org/software/gsl/manual/gsl-ref.html
++ Description:
++   Provides an interface to the routines of the GNU Scientific Library.
++   http://www.gnu.org/software/gsl/manual/
++ Author(s):
++   Kurt Pagani, Alasdair McAndrew, Bill Page
Gsl() : Exports == Implementation where

  DF ==> DoubleFloat

  Exports ==  with

    lookup: String -> Symbol
      ++ \spad{\lookup} finds GSLL function by GSL name and
      ++ displays some documentation.
    isNaN?: DF -> Boolean
      ++ \spad{\isNaN?} returns true if x is not-a-number. 
    isInf: DF -> Integer
      ++ \spad{\isInf} returns +1 if x is positive infinity,
      ++ -1 if x is negative infinity and 0 otherwise. On
      ++ some platforms 1 is returned for negative infinity.
    finite?: DF -> Boolean
      ++ \spad{\finite?} returns true if x is a real number,
      ++ and false if it is infinite or not-a-number.
    fcmp: (DF,DF,DF) -> Integer
      ++ \spad{\fcmp} determines whether x and y are approximately
      ++ equal to a relative accuracy epsilon. If x and y lie
      ++ within this interval, they are considered approximately equal
      ++ and the function returns 0. Otherwise if x < y, the function
      ++ returns -1, or if x > y, the function returns +1. Note that
      ++ this function is not suitable for testing whether a value is
      ++ approximately zero.
    integrationQng: (DF->DF,DF,DF) -> Record(result:DF, abserr:DF, neval:Integer)
      ++ \spad{\integrationQng(f,a,b)}  applies the Gauss-Kronrod 10-point, 
      ++ 21-point, 43-point and 87-point integration rules in succession
    integrationQng: (DF->DF,DF,DF,DF) -> Record(result:DF, abserr:DF, neval:Integer)
      ++ \spad{\gslIntegrationQng(f,a,b,epsabs)}  applies the Gauss-Kronrod 10-point, 
      ++ 21-point, 43-point and 87-point integration rules in succession
    integrationQng: (DF->DF,DF,DF,DF,DF) -> Record(result:DF, abserr:DF, neval:Integer)
      ++ \spad{\gslIntegrationQng(f,a,b,epsabs,epsrel)}  applies the Gauss-Kronrod 10-point, 
      ++ 21-point, 43-point and 87-point integration rules in succession

    integrationQag: (DF -> DF,DF,DF,Integer) -> Record(result:DF, abserr:DF)
      ++ \spad{\integrationQag} applies an integration rule adaptively
      ++ until an estimate of the integral of f over (a,b) is achieved
      ++ within the desired absolute and relative error limits, epsabs
      ++ and epsrel. The function returns the final approximation,
      ++ result, and an estimate of the absolute error, abserr.
      ++ The integration rule is determined by the value of key,
      ++   GSL_INTEG_GAUSS15  (key = 1)
      ++   GSL_INTEG_GAUSS21  (key = 2)
      ++   GSL_INTEG_GAUSS31  (key = 3)
      ++   GSL_INTEG_GAUSS41  (key = 4)
      ++   GSL_INTEG_GAUSS51  (key = 5)
      ++   GSL_INTEG_GAUSS61  (key = 6)
      ++ corresponding to the 15, 21, 31, 41, 51 and 61 point Gauss-
      ++ Kronrod rules. The higher-order rules give better accuracy for
      ++ smooth functions, while lower-order rules save time when the
      ++ function contains local difficulties, such as discontinuities. 
    LUdecomposition: Matrix DF -> Record(LU:Matrix DF,Perm:Vector Integer,Sign:Integer)
      ++ Factorize the square matrix A into the LU decomposition PA = LU,
      ++ and return the sign of the permutation.  On output the diagonal and
      ++ upper triangular part of the input matrix A contain the matrix U.
      ++ The lower triangular part of the input matrix (excluding the
      ++ diagonal) contains L.  The diagonal elements of L are unity, and
      ++ are not stored.
      ++ The permutation matrix P is returned as the second value. The j-th
      ++ column of the matrix P is given by the k-th column of the identity
      ++ matrix, where k = p_j the j-th element of the permutation vector.
      ++ The sign of the permutation is returned as the third value;
      ++ it is the value (-1)^n, where n is the number of interchanges in
      ++ thepermutation.

  Implementation ==  add

    lookup(s) ==
      j:SExpression := GSL_-LOOKUP(s)$Lisp
      if not null? j then
        DESCRIBE(symbol(j))$Lisp
      symbol(j)
    isNaN?(a) == NANP(a)$Lisp      
    finite?(a) == FINITEP(a)$Lisp      
    isInf(a) ==
      r:SExpression := GSLISINF(a)$Lisp
      null? r => 0
      integer r
    fcmp(x,y,epsilon) ==
      r:SExpression := DOUBLE_-FLOAT_-UNEQUAL(x,y,epsilon)$Lisp
      null? r => 0
      integer r
    --
    integrationQng(f,a,b) == GSLINTEGRATIONQNG(
      -- convert returned values to Spad representation
      (v1:DF,v2:DF,v3:Integer):Record(result:DF, abserr:DF, neval:Integer)+->[v1,v2,v3],
      f,a,b,nil()$List(DF))$Lisp
    integrationQng(f,a,b,epsabs) == GSLINTEGRATIONQNG(
      -- convert returned values to Spad representation
      (v1:DF,v2:DF,v3:Integer):Record(result:DF, abserr:DF, neval:Integer)+->[v1,v2,v3],
      f,a,b,[epsabs]$List(DF))$Lisp
    integrationQng(f,a,b,epsabs,epsrel) == GSLINTEGRATIONQNG(
      -- convert returned values to Spad representation
      (v1:DF,v2:DF,v3:Integer):Record(result:DF, abserr:DF, neval:Integer)+->[v1,v2,v3],
      f,a,b,[epsabs,epsrel]$List(DF))$Lisp
    integrationQag(f,a,b,key) == GSLINTEGRATIONQAG(
      (v1:DF,v2:DF):Record(result:DF, abserr:DF)+->[v1,v2],
      f,a,b,key)$Lisp
    --
    LUdecomposition(A) == GSLLUDECOMP(
      -- convert returned values to Spad representation
      (v1:List List DF, v2: List Integer,v3:Integer):Record(LU:Matrix DF,Perm:Vector Integer,Sign:Integer) +->
        [matrix v1,vector v2,v3],
      listOfLists A,nrows A,ncols A)$Lisp

